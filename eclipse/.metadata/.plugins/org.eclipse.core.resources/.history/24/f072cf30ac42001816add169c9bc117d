package com.flippity.ei.common.tiles.atomic;

import com.flippity.ei.common.blocks.atomic.BlockCentrifuge;
import com.flippity.ei.common.items.ItemRegistry;

import cofh.api.energy.EnergyStorage;
import cofh.api.energy.IEnergyHandler;
import cpw.mods.fml.common.registry.GameRegistry;
import net.minecraft.block.Block;
import net.minecraft.block.material.Material;
import net.minecraft.entity.player.EntityPlayer;
import net.minecraft.init.Blocks;
import net.minecraft.inventory.ISidedInventory;
import net.minecraft.item.Item;
import net.minecraft.item.ItemBlock;
import net.minecraft.item.ItemStack;
import net.minecraft.item.ItemTool;
import net.minecraft.nbt.NBTTagCompound;
import net.minecraft.tileentity.TileEntity;
import net.minecraftforge.common.util.ForgeDirection;

public class TECentrifuge extends TileEntity implements IEnergyHandler, ISidedInventory{
	
	public static boolean rotate = false;
	public static int fuel = 0;
	public static boolean canfill = true;
	
	protected EnergyStorage storage;
	public int output;
	public static int energy;
	public static int rotation = 0;
	public static boolean activated = false;
	
	private static final int[] slotsBottom = new int[] { 10, 11 };
	
    private ItemStack[] centrifugeItemStacks = new ItemStack[2];

	
	
	public int i = 0;
	
	public TECentrifuge() {
		this.output = 256;
		this.storage = new EnergyStorage(output * 64);
		
		storage.setMaxReceive(512);
		storage.setMaxExtract(output);
		//storage.setMaxTransfer(output);
	}
	
	@Override
	public void updateEntity() {
		i++;
		rotation++;
		if(i == 40) {
			i = 0;
			if(fuel > 0) {
				activated = true;
				fuel -= 1;
				System.out.println("fuel - 1");
			}else {
				activated = false;
			}
		}
		
		System.out.println(i);
	}

	@Override
	public void writeToNBT(NBTTagCompound nbt) {
		nbt.setInteger("fuel", fuel);
		nbt.setInteger("time", i);
	}
	
	@Override
	public void readFromNBT(NBTTagCompound nbt) {
		i = nbt.getInteger("time");
		fuel = nbt.getInteger("fuel");
	}

	@Override
	public boolean canConnectEnergy(ForgeDirection from) {
		return true;
	}

	@Override
	public int receiveEnergy(ForgeDirection from, int maxReceive, boolean simulate) {
		return this.storage.receiveEnergy(Math.min(output * 2, maxReceive), simulate);
	}

	@Override
	public int extractEnergy(ForgeDirection from, int maxExtract, boolean simulate) {
		return 0;
	}

	@Override
	public int getEnergyStored(ForgeDirection from) {
		return storage.getEnergyStored();
	}

	public static boolean isItemFuel(ItemStack itemstack){
		return getItemBurnTime(itemstack) > 0;
	}
	
	public static int getItemBurnTime(ItemStack itemstack){
			Item item = itemstack.getItem();
		
			if(item instanceof ItemBlock && Block.getBlockFromItem(item) != Blocks.air){
				Block block = Block.getBlockFromItem(item);
				
				/*if(block == TMBlock.tutBlock){
					return 200;
				}*/
				
				/*if(block.getMaterial() == Material.rock){
					return 300;
				}*/
				return 100;
			}else {
				return 0;
			}
			
			/*if(item == TMItem.tutItem) return 1600;
			if(item instanceof ItemTool && ((ItemTool) item).getToolMaterialName().equals("EMERALD")) return 300;
			return GameRegistry.getFuelValue(itemstack);
		}*/
	}
	
	@Override
	public int getMaxEnergyStored(ForgeDirection from) {
		return storage.getMaxEnergyStored();
	}

	
	
	
	
	@Override
	public int getSizeInventory() {
		return 0;
	}

	@Override
	public ItemStack getStackInSlot(int p_70301_1_) {
		return null;//this.centrifugeItemStacks[p_70301_1_];
	}

	@Override
	public ItemStack decrStackSize(int p_70298_1_, int p_70298_2_) {
		return null;
	}

	@Override
    public ItemStack getStackInSlotOnClosing(int p_70304_1_)
    {
        if (this.centrifugeItemStacks[p_70304_1_] != null)
        {
            ItemStack itemstack = this.centrifugeItemStacks[p_70304_1_];
            this.centrifugeItemStacks[p_70304_1_] = null;
            return itemstack;
        }
        else
        {
            return null;
        }
    }

    /**
     * Sets the given item stack to the specified slot in the inventory (can be crafting or armor sections).
     */
    public void setInventorySlotContents(int p_70299_1_, ItemStack p_70299_2_)
    {
        /*this.centrifugeItemStacks[p_70299_1_] = p_70299_2_;

        if (p_70299_2_ != null && p_70299_2_.stackSize > this.getInventoryStackLimit())
        {
            p_70299_2_.stackSize = this.getInventoryStackLimit();
        }*/
    }

    /**
     * Returns the name of the inventory
     */
    public String getInventoryName()
    {
        return "centrifuge";
    }

	@Override
	public boolean hasCustomInventoryName() {
		return true;
	}

	@Override
	public int getInventoryStackLimit() {
		return 64;
	}

	@Override
	public boolean isUseableByPlayer(EntityPlayer p_70300_1_) {
		return true;
	}

	@Override
	public void openInventory() {
		
	}

	@Override
	public void closeInventory() {
		
	}

	@Override
	public boolean isItemValidForSlot(int slot, ItemStack stack) {
		if(stack.getItem() == ItemRegistry.puckU235 && slot == 10) {
			return true;
		}else {
			return false;
		}
	}

	@Override
	public int[] getAccessibleSlotsFromSide(int slots) {
		return null;
	}

	@Override
	public boolean canInsertItem(int p_102007_1_, ItemStack p_102007_2_, int p_102007_3_) {
		return false;
	}

	@Override
	public boolean canExtractItem(int p_102008_1_, ItemStack stack, int p_102008_3_) {
		return stack.getItem() == ItemRegistry.puckU235;
	}
	
}

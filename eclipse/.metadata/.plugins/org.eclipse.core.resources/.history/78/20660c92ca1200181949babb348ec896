package com.flippity.ei.client.renderers.cables;

import org.lwjgl.opengl.GL11;

import com.flippity.ei.client.models.cables.ModelCable;
import com.flippity.ei.common.blocks.cables.BlockCableCopper;

import net.minecraft.block.Block;
import net.minecraft.client.Minecraft;
import net.minecraft.client.renderer.Tessellator;
import net.minecraft.client.renderer.tileentity.TileEntitySpecialRenderer;
import net.minecraft.entity.Entity;
import net.minecraft.tileentity.TileEntity;
import net.minecraft.util.ResourceLocation;
import net.minecraft.world.World;

public class RendererCableCopper extends TileEntitySpecialRenderer {
    private static final ResourceLocation resourceloc = new ResourceLocation(com.flippity.ei.reference.Reference.MOD_ID + ":" + "textures/blocks/electricalCopperCableTexture.png");
    float pixel = 1F/16F;
    float texPixel = 1F/32F;
    @Override
    public void renderTileEntityAt(TileEntity te, double x, double y, double z, float scale) {    	
    	GL11.glTranslated(x, y, z);
    	GL11.glDisable(GL11.GL_LIGHTING);
    	this.bindTexture(resourceloc);
    	drawCore(te);
    	GL11.glEnable(GL11.GL_LIGHTING);
		}
    
    public void drawCore(TileEntity te) {
    	Tessellator tes = Tessellator.instance;
    	tes.startDrawingQuads();{
    		tes.addVertexWithUV(1-11*pixel/2, 11*pixel/2, 1-11*pixel/2, 5*texPixel, 5*texPixel);
    		tes.addVertexWithUV(1-11*pixel/2, 1-11*pixel/2, 1-11*pixel/2, 5*texPixel, 0*texPixel);
    		tes.addVertexWithUV(11*pixel/2, 1-11*pixel/2, 1-11*pixel/2, 0*texPixel, 0*texPixel);
    		tes.addVertexWithUV(11*pixel/2, 11*pixel/2, 1-11*pixel/2, 0*texPixel, 5*texPixel);
    	}
    	tes.draw();
    }

    //Set the lighting stuff, so it changes it's brightness properly.       
    private void adjustLightFixture(World world, int i, int j, int k, Block block) {
        //  the if statement checking for if the world is null or not if not renders the block if null renders the item model
        // != means not equal
        if (world != null) {
            int dir = world.getBlockMetadata(i, j, k);

            GL11.glPushMatrix();
            //This line actually rotates the renderer.
            GL11.glRotatef(dir * (90F), 0F, 1F, 0F);
            

            /*
             * Place your rendering code here.
             */

            GL11.glPopMatrix();
            
          //Stuff to get the dir int, from the block metadata or the tile or whatever
          //Check the dir and apply rotations

                  if (dir == 0)
                  {
                      GL11.glRotatef(-180F, 0.0F, 1.0F, 0.0F);
                  }

                  if (dir % 2 != 0)
                  {
                      GL11.glRotatef(dir * (-90F), 0.0F, 1.0F, 0.0F);
                  }

                  if (dir % 2 == 0)
                  {
                      GL11.glRotatef(dir * (-180F), 0.0F, 1.0F, 0.0F);
                  }
        }
        else {
            GL11.glRotatef(180F, 0.0F, 1.0F, 0.0F);

        }
    }
}
